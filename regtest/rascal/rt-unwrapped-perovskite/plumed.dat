r: SPHERICAL_EXPANSION ...
  SPECIES1=1-64 SPECIES2=65-128 SPECIES3=129-320
  HYPERPARAMS={
    "max_radial": 6,
    "max_angular": 1,
    "compute_gradients": false,
    "cutoff_function": {"type": "ShiftedCosine", "cutoff": {"value": 6, "unit": "AA"}, "smooth_width": {"value": 0.5, "unit": "AA"}},
    "gaussian_density": {"type": "Constant", "gaussian_sigma": {"value": 0.5, "unit": "AA"}},
    "radial_contribution": {"type": "GTO"}
  }
...
#DISTANCES IN PLUMED ARE IN NANOMETERS (there's an appropriate conversion of units to be done here - annoying feature, units are ignored and
# constrained to be Angstroms)

# This vector selects out the Ti atoms
mask: CONSTANT VALUES=0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

# Now transpose the spherical expansion matrix
rT: TRANSPOSE ARG=r

# And multiply by mask to get vector that contains spherical expansions summed over Ti atoms for each element glob here is a vector with ndescriptors components
glob: MATRIX_VECTOR_PRODUCT ARG=rT,mask
globM: CUSTOM ARG=glob FUNC=x*100 PERIODIC=NO

# And lets get the three vectors for Q (we have to reorder the features due to the different ordering of the species)
QM1: SELECT_COMPONENTS ARG=globM COMPONENTS=50,54,58,62,66,70,26,30,34,38,42,46,2,6,10,14,18,22
QP0: SELECT_COMPONENTS ARG=globM COMPONENTS=51,55,59,63,67,71,27,31,35,39,43,47,3,7,11,15,19,23
QP1: SELECT_COMPONENTS ARG=globM COMPONENTS=52,56,60,64,68,72,28,32,36,40,44,48,4,8,12,16,20,24

P: SELECT_COMPONENTS ARG=globM COMPONENTS=50,51,52
Q: VSTACK ARG=QM1,QP0,QP1
O: MATRIX_VECTOR_PRODUCT ARG=Q,P

# Now we need to project on the latent space to get the final two-component CVs (these are derived from a PCA on some meaningful trajectories)
Omean: CONSTANT VALUES=1.288698831095371702e+02,2.617335066408316493e+02,-4.470590442155883011e+02,3.805963661105024016e+02,-3.191211037789739180e+02,3.199499517960481754e+01,2.558077069034212702e-18,-4.767958879095662804e-17,5.535828965091558431e-17,7.901463027613001226e-16,2.834038812988062537e-16,7.773037586123435923e-17,1.083320022495142787e+01,-2.127298042936651612e+01,1.102423521729797642e+02,-7.436487467161546761e+01,-6.057457008395690679e+01,-1.127048489717186719e+01
PCproj1: CONSTANT VALUES=-1.736605074221235501e-01,-3.439185647804997581e-01,6.000549946713460425e-01,-5.153518601842774771e-01,4.306120091626224333e-01,-4.936419424990570737e-02,5.737224441874260005e-20,5.789200825971290787e-20,1.602354531022834871e-19,-3.734768294581900180e-18,-1.069924852588776739e-18,-1.325919968746099882e-19,-1.427658043531180969e-02,2.831673923664360451e-02,-1.442261845885493277e-01,9.779100322579141469e-02,8.033644780771051486e-02,1.486978404735405865e-02
PCproj2: CONSTANT VALUES=-1.752179731061346835e-01,1.221739151233948023e-01,9.009355055696890990e-02,2.829699014726243245e-02,-2.364418349971024458e-01,-9.313161193379775327e-01,-8.450667932128574439e-19,1.850794190761883150e-20,-2.827677172092518699e-18,3.498900249925885628e-17,-4.158577488424971303e-18,-9.358198163275448275e-18,-8.393629821959581669e-03,1.337107208596517542e-02,-8.472249327649658546e-02,1.057716443535616641e-01,5.864574806942762786e-02,1.208591791777620904e-02

Orel: CUSTOM ARG=O,Omean FUNC=x-y PERIODIC=NO
CV1_vec: CUSTOM ARG=Orel,PCproj1 FUNC=x*y PERIODIC=NO
CV1: SUM ARG=CV1_vec PERIODIC=NO
CV2_vec: CUSTOM ARG=Orel,PCproj2 FUNC=x*y PERIODIC=NO
CV2: SUM ARG=CV2_vec PERIODIC=NO

PRINT ARG=CV1 FILE=CV1 FMT=%e
PRINT ARG=CV2 FILE=CV2 FMT=%e

FLUSH STRIDE=1
BIASVALUE ARG=CV1

